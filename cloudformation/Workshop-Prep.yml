AWSTemplateFormatVersion: "2010-09-09"
Description: Setup resources for SageMaker deployment options workshop.
Parameters: 
  UniqueID: 
    Type: String
    Default: reinvent
    Description: Enter your initials in lower case as a unique identifier for components created, if you are sharing this AWS account with other users. Use a minimum of three characters
    AllowedPattern: "^([a-z]|(d(?!d{0,2}.d{1,3}.d{1,3}.d{1,3})))([a-zd]|(.(?!(.|-)))|(-(?!.))){1,61}[a-zd.]$"

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      VersioningConfiguration:
        Status: Enabled
      BucketName:
        Fn::Join:
          - ""
          - - "deployment-options-workshop"
            - !Ref UniqueID
            - "-"
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"

  SageMakerNotebookLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      NotebookInstanceLifecycleConfigName:
        Fn::Join:
          - ""
          - - "DeploymentOptionsLifecycleConfig"
            - !Ref UniqueID
      OnCreate:
        - Content: 
            Fn::Base64: !Sub |
                #!/bin/bash
                set -e
                sudo -i -u ec2-user bash << EOF
                echo "Setup the Workshop"
                pwd
                #For not we are not cloning a repo, since we are working with a private repo.  TODO : Fix.
                #git clone https://github.com/sirimuppala/customer-event-sequence-prediction.git
                #pwd
                #ls -la
                #cp -R /home/ec2-user/customer-event-sequence-prediction/* /home/ec2-user/SageMaker/

                #Download pretrained models, training and test data hosted on a S3 bucket.

                set -e
                sudo -i -u ec2-user bash << EOF
                echo "Setup the Workshop"
                pwd
                echo "Setup the Workshop"
                #For not we are not cloning a repo, since we are working with a private repo.  TODO : Fix.
                #git clone https://github.com/sirimuppala/customer-event-sequence-prediction.git
                #pwd
                #ls -la
                #cp -R /home/ec2-user/customer-event-sequence-prediction/* /home/ec2-user/SageMaker/

                #TODO : NEED TO MOVE THIS TO THE CORRECT REPO
                git clone https://github.com/sirimuppala/customer-churn-prediction-amazon-sagemaker-workshop.git

                #Download pretrained models, training and test data hosted on a S3 bucket.
                cd /home/ec2-user/SageMaker/
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/models/movie-recommendation-models/model.tar.gz -P models
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/models/music-recommendation-models/music-rec-kiran.tar.gz -P models
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/data/movie-recommendations-data/movie_train_age.csv -P data
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/data/movie-recommendations-data/baseline.csv -P data
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/data/movie-recommendations-data/movie_test_age.csv -P data
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/data/music-recommendations-data/music_test.csv -P data
                wget https://reinvent-sagemaker-deployment-2019.s3-us-west-2.amazonaws.com/recommendations/temp-service-folder/sagemaker-internal-model.json -P .

                aws configure add-model --service-model file://sagemaker-internal-model.json --service-name sagemaker

                cp -R /home/ec2-user/customer-churn-prediction-amazon-sagemaker-workshop/prep/deploy_model.py /home/ec2-user/SageMaker/

                nohup python deploy_model.py &



  SageMakerNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties: 
      InstanceType: ml.t2.medium
      LifecycleConfigName:
        Fn::Join:
          - ""
          - - "DeploymentOptionsLifecycleConfig"
            - !Ref UniqueID
      NotebookInstanceName:
        Fn::Join:
            - ""
            - - "DeploymentOptions-Notebook-"
              - !Ref UniqueID
      RoleArn: !GetAtt [SageMakerNotebookInstanceRole, Arn]
      
  SageMakerNotebookInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: sagemaker.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName:
        Fn::Join:
           - ""
           - - "SageMakerNotebookInstance-ServiceRole"
             - !Ref UniqueID
             - "-"
             - !Select
              - 0
              - !Split
               - "-"
               - !Select
                 - 2
                 - !Split
                   - "/"
                   - !Ref "AWS::StackId"

  RetrainSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "RetrainLambda"
              - "Arn"
          Protocol: lambda

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName:
        Fn::Join:
          - ""
          - - "Movie-Recommendations-Lambda-ServiceRole-"
            - !Ref UniqueID


  RetrainLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Code:
        ZipFile: !Sub |
          import boto3
          import os
          import json
          import datetime
          from time import gmtime, strftime
          from boto3.session import Session

          region = boto3.session.Session().region_name

          sagemaker = boto3.client('sagemaker')

          def handler(event, context):

            print('Into handler')

            job_name="RetrainMovieRecModel-" + strftime("%Y-%m-%d-%H-%M-%S", gmtime())
            train_instance_count=1
            train_instance_type="ml.c4.2xlarge"
            train_volume_size=10

            sagemaker_role = os.environ['SageMakerExecutionRole']
            container_path = os.environ['ContainerPath']
            model_artifact_bucket= os.environ['S3BucketName']
            data_bucket= os.environ['S3BucketName']

            maxdepth_in="5"
            eta_in="0.2"
            gamma_in="4"
            min_child_weight_in="6"
            objective_in="reg:linear"
            num_round_in="100"

            create_training_params = \
                  {
                     "AlgorithmSpecification": {
                          "TrainingImage": container_path,
                          "TrainingInputMode": "File"
                      },
                      "RoleArn": sagemaker_role,
                      "OutputDataConfig": {
                          "S3OutputPath": "s3://{}/{}/output".format(model_artifact_bucket, job_name)
                      },
                      "ResourceConfig": {
                          "InstanceCount": train_instance_count,
                          "InstanceType": train_instance_type,
                          "VolumeSizeInGB": train_volume_size
                      },
                      "TrainingJobName": job_name,
                      "HyperParameters": {
                          "max_depth": maxdepth_in,
                          "eta": eta_in,
                          "gamma": gamma_in,
                          "min_child_weight": min_child_weight_in,
                          "objective": objective_in,
                          "num_round": num_round_in
                      },
                      "StoppingCondition": {
                       "MaxRuntimeInSeconds": 3600
                      },
                      "InputDataConfig": [
                          {
                              "ChannelName": "train",
                              "DataSource": {
                                  "S3DataSource": {
                                      "S3DataType": "S3Prefix",
                                      "S3Uri": "s3://{}/train".format(data_bucket),
                                      "S3DataDistributionType": "FullyReplicated"
                                  }
                              },
                              "ContentType": "csv",
                              "CompressionType": "None"
                          }
                      ],
                      "OutputDataConfig": {
                          "S3OutputPath": "s3://{}/{}/output".format(model_artifact_bucket, job_name)
                      },
                      "StoppingCondition": {
                          "MaxRuntimeInSeconds": 60 * 60
                      }
                 }

            response = sagemaker.create_training_job(**create_training_params)

      Role:
        Fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Environment:
        Variables:
          SageMakerExecutionRole: !GetAtt [SageMakerNotebookInstanceRole, Arn]
          ContainerPath: '246618743249.dkr.ecr.us-west-2.amazonaws.com/sagemaker-xgboost:0.90-1-cpu-py3'
          S3BucketName: !Ref S3Bucket
      Runtime: "python3.6"
      Timeout: 25

  "LambdaResourcePolicy": {
    "Type": "AWS::Lambda::Permission",
    "Properties": {
      "FunctionName": { "Ref": "RetrainLambda" },
      "Principal": "sns.amazonaws.com",
      "Action": "lambda:InvokeFunction",
      "SourceArn": { "Ref": "RetrainSNSTopic" }
    }
  }

Outputs:
      SageMakerNotebookInstance:
        Description: The ID of the SageMaker Notebook Instance
        Value: !Ref SageMakerNotebookInstance
